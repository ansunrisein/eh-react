scalar Date

enum EventType {
  TEXT
  LIST
  PICTURE
}

interface Event {
  id: ID!
  type: EventType!
  header: String
  deadline: Date
  pinned: Boolean!
}

type TextEvent implements Event {
  id: ID!
  type: EventType!
  header: String
  deadline: Date
  pinned: Boolean!
  text: String!
}

type ListEvent implements Event {
  id: ID!
  type: EventType!
  header: String
  deadline: Date
  pinned: Boolean!
  list: [String!]!
}

type Board {
  id: ID!
  name: String!
  description: String
  pinned: Boolean!
  favorite: Boolean!
  events: [Event!]!
}

input DashboardFilter {
  ownership: Int
  favorite: Int
  pin: Int
}

input DashboardSort {
  nearestEvent: String
  favorite: String
  subsCount: String
  pin: String
}

input Page {
  before: ID
  after: ID
  first: Int
  last: Int
}

type DashboardConnection {
  pageInfo: PageInfo!
  edges: [DashboardEdge!]!
}

type DashboardEdge {
  node: Board!
  cursor: ID!
}

type PageInfo {
  startCursor: ID
  endCursor: ID
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type User {
  id: ID!
  nickname: String!
  name: String
  avatar: String
}

type Query {
  dashboard(filter: DashboardFilter, sort: DashboardSort, page: Page): DashboardConnection!
  board(id: ID!): Board!
  me: User
}

type Mutation {
  createBoard(title: String!, description: String): Board!
  createEvent(
    boardId: ID!
    type: EventType!
    header: String
    deadline: Date
    pinned: Boolean!
    text: String
    list: [String!]
  ): Event!
  updateAvatar(avatar: String): User!
  updateProfile(nickname: String!, name: String): User!
}
