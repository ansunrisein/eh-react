# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

interface Event {
    _id: ID!
    board: Board!
    deadline: DateTime
    header: String
    pinned: Boolean!
    type: EventType!
}

type Board {
    _id: ID!
    description: String
    events(page: Page!): EventConnection!
    favorite: Boolean!
    pinned: Boolean!
    title: String!
    user: User!
}

type BoardConnection {
    edges: [BoardEdge!]!
    pageInfo: PageInfo!
}

type BoardEdge {
    cursor: ID!
    node: Board!
}

type EventConnection {
    edges: [EventEdge!]!
    pageInfo: PageInfo!
}

type EventEdge {
    cursor: ID!
    node: Event!
}

type ListEvent implements Event {
    _id: ID!
    board: Board!
    deadline: DateTime
    header: String
    list: [String!]!
    pinned: Boolean!
    type: EventType!
}

type Mutation {
    createBoard(description: String, title: String!): Board!
    createEvent(boardId: ID!, deadline: DateTime, header: String, list: [String!], pinned: Boolean!, text: String, type: EventType!): Event
    removeBoard(_id: ID!): Board!
    removeEvent(_id: ID!): Event
    updateAvatar(avatar: String): User!
    updateBoard(_id: ID!, description: String, title: String!): Board!
    updateEvent(_id: ID!, deadline: DateTime, header: String, list: [String!], pinned: Boolean!, text: String, type: EventType!): Event
    updateProfile(name: String, nickname: String!): User!
}

type PageInfo {
    endCursor: ID
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: ID
}

type Query {
    board(_id: ID!): Board!
    dashboard(filter: BoardsFilter!, page: Page!, sort: BoardsSort!): BoardConnection!
    event(_id: ID!): Event
    events(boardId: ID!, page: Page!): EventConnection!
    me: User
}

type TextEvent implements Event {
    _id: ID!
    board: Board!
    deadline: DateTime
    header: String
    pinned: Boolean!
    text: String!
    type: EventType!
}

type User {
    _id: ID!
    avatar: String
    name: String
    nickname: String!
}

enum EventType {
    LIST
    PICTURE
    TEXT
}

input BoardsFilter {
    favorite: Int
    ownership: Int
    pin: Int
}

input BoardsSort {
    favorite: String
    nearestEvent: String
    pin: String
    subsCount: String
}

input Page {
    after: ID
    first: Int
}


"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime
